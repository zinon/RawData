#! /usr/bin/env python
"""
Module removeDuplicates 
  remove duplicate events (events with same RunNumber 
  and EventNumber) from data files

"""

import optparse
import subprocess
import os
import re
import ROOT
from glob import glob
from EventMap import EventMap

## Configuration
def main():
  # Load Parser
  usage = "usage: %prog [options] INPUT_FILE"
  parser = optparse.OptionParser(usage=usage)

  # Set Options
  parser.add_option("-o", "--output", dest="output", metavar="OUTPUT", 
      help="specify the OUTPUT file name" )
  parser.add_option("-t", "--tree", dest="tree", metavar="TREE", 
      help="specify the TREE name" )
  parser.add_option("-n", "--nevents", dest="nevents", metavar="MAX", type=int, 
      help="specify the MAX number of events" )

  # Set Defaults 
  parser.set_defaults( tree = 'TauEffTree' )
  parser.set_defaults( nevents = -1 )

  # Parse Args
  (options,args) = parser.parse_args()

  # Check that INPUT_FILE is specified
  if not len(args) > 0:
    print 'ERROR - Must provide INPUT_FILE'
    parser.print_help()
    exit(1)

  # collect options
  filename = args[0]
  treename = options.tree 
  fOUTname = filename.replace( '.root','_nodups.root' )
  if options.output: fOUTname = options.output


  # Load input chain
  c = ROOT.TChain(treename)
  c.Add( filename ) 
  entries = c.GetEntries()
  print 'Entries: ', entries
  c.GetEntry(0)
  f = c.GetCurrentFile()

  # open output file
  fOUT = ROOT.TFile.Open( fOUTname, 'RECREATE' ) 
  
  # Clone objects other than main tree to new file
  print 
  print 'Copying items other than main tree:'
  key_list =  f.GetListOfKeys()
  itr = key_list.MakeIterator()
  while 1:
    key = itr.Next()
    if not key: break
    if str(key.GetName()) == treename: continue
    obj = f.Get(key.GetName())

    print 'copying ', key.GetName(), '...'
    fOUT.WriteTObject( obj )

  # clone main tree
  cnew = c.CloneTree(0)

  # instantiate event map
  emap = EventMap()

  # loop over events
  n_events_processed = 0
  n_duplicates       = 0
  for i in range(0,entries):
    c.GetEntry(i)
    if n_events_processed==0: 
      print 'Starting dupicate removal'
    elif n_events_processed%100000 == 0: 
      print 'Nprocessed:  ', n_events_processed, '  Nduplicates: ', n_duplicates, '  dup frac (%%): ', (float(n_duplicates)/float(n_events_processed) * 100.)

    if emap.hasEvent( c.RunNumber, c.EventNumber ):
      print 'WARNING - found duplicate RunNumber: ', c.RunNumber, '  EventNumber: ', c.EventNumber
      n_duplicates +=1
    else: 
      emap.addEvent( c.RunNumber, c.EventNumber )
      cnew.Fill()

    n_events_processed +=1 
    if options.nevents > 0:
      if n_events_processed > options.nevents:
        break

  if not n_duplicates:
    print 'No duplicates found.'
  else:
    print 'Summary of Duplicates '
    print 'Nprocessed:  ', n_events_processed
    print 'Nduplicates: ', n_duplicates
    print 'dup frac (%%): ', (float(n_duplicates)/float(n_events_processed) * 100.)

  fOUT.Write()
  fOUT.Close()



if __name__=='__main__': main()













