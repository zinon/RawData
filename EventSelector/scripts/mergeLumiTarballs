#! /usr/bin/env python
"""Module genInputXML.py 
  For generating input XML config files from a list of files 

"""
import optparse
import ROOT
import os
import tempfile
import shutil
import subprocess
import glob 

def createFileEntry( writer, filename ):
  writer.write( '<In FileName="%s" Lumi="1."/>\n'%filename )

class TmpDir():
  def __init__( self ):
    self.tmpdir = tempfile.mkdtemp()
    print 'created tmp dir: ', self.tmpdir

  def __del__(self):
    if self.tmpdir and os.path.exists( self.tmpdir ):
      #shutil.rmtree( self.tmpdir )
      print 'removed tmp dir: ', self.tmpdir

class Chdir:         
  def __init__( self, newPath ):  
    self.savedPath = os.getcwd()
    os.chdir(newPath)

  def __del__( self ):
    if os.path.exists( self.savedPath ): os.chdir( self.savedPath )


def main():

  # Load Parser
  usage = "usage: %prog [options] -o OUTPUT FILES"
  parser = optparse.OptionParser(usage=usage)

  # Set Options
  parser.add_option("-o", "--output", dest="output", metavar="OUTPUT", 
      help="specify the OUTPUT xml config file" )

  # Set Defaults 
  #parser.set_defaults( checking = False )

  # Parse Args
  (options,args) = parser.parse_args()

  # Check that OUTPUT is specified
  if not options.output:
    print 'ERROR - Must provide output xml config file'
    parser.print_help()
    exit(1)

  # Check for input file list
  if len(args) < 1 : 
    print "ERROR - Must provide input file list"
    parser.print_help()
    exit(1)

  # Build input file list:
  input_files = []
  for file in args:
    if os.path.exists(file):
      input_files.append( os.path.abspath( file ) )

  # Get AbsPath for output file
  absoutput = '%s/%s'%(os.getcwd(),options.output)


  ## Generate random temp dir
  tmpdir = TmpDir()
  chdir = Chdir( tmpdir.tmpdir )

  storedir = 'store'
  os.mkdir( storedir )

  nFiles = 0
  print 'input files: ', input_files
  for infile in input_files:
    print 'working on file %s...'%infile
    if infile and os.path.exists( infile ):
      nFiles+=1
      tmpfile = 'tmp.tar.gz'
      shutil.copyfile( infile, tmpfile  )
      #print os.listdir('.')
      subprocess.call( 'tar xzf %s'%(tmpfile), shell=True )
      xml_files = glob.glob( '*.xml' )
      for xml in xml_files:
        shutil.move( xml, 'store/sub%d_%s'%(nFiles,xml) )
      os.remove( tmpfile )

  print 'going to xml store dir'
  os.chdir( 'store' )
  print os.listdir('.')

  p = subprocess.Popen( 'merge_goodrunslists ./ merge.xml', shell=True, stdout=subprocess.PIPE )
  print p.communicate()[0]
  shutil.copyfile( 'merge.xml', absoutput )



if __name__ == '__main__': main()

#EOF

 


