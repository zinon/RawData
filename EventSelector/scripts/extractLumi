#!/usr/bin/env python
"""
Author:      W. Davey (Bonn) <Will.Davey@cern.ch>
Usage:
 ./extractLumi file1.root,file2.root,...
"""
import ROOT
import optparse
import os
def main():

   # Load Parser
  usage = "usage: %prog [options] FILES"
  parser = optparse.OptionParser(usage=usage)

  # Set Options
  parser.add_option("-t", "--tree", dest="tree", metavar="TREE", 
      help="specify the TREE in the input files (will switch on tree checking)" )
  parser.add_option("-d", "--dir", dest="dir", metavar="DIR", 
      help="specify the lumi DIR in the input files" )

  # Set Defaults 
  parser.set_defaults( tree = 'tau' )
  parser.set_defaults( dir  = 'Lumi' )

  # Parse Args
  (options,args) = parser.parse_args()
   
  # Check for input file list
  if len(args) < 1 : 
    print "ERROR - Must provide input file list"
    parser.print_help()
    exit(1)

  ## get inputs
  input_files = []
  for str in args:
    input_files += str.split(',')
  
  print "input_files = ", input_files
  #file_index = 0
  for filename in input_files:
      # Update Current File - For Lumi GRL writeout
      ####################################################
      file = ROOT.TFile.Open( filename )
      if not file:
        print 'WARNING --> failure opening file: ', filename
        continue

      #file_index += 1
      basename = os.path.basename( filename )

      print 'Getting XML Lumi information...'
      dir = file.GetDirectory(options.dir)
      if not dir:
        print 'WARNING: No Lumi dir found!'
      else:
        objstr = dir.Get(options.tree)
        outfilename = '%s.lumi.xml'%basename
        f = open(outfilename, 'w' )
        f.write( objstr.GetString().Data() )
        f.close()
        print 'wrote out file: ', outfilename

      try:
        file.Close()
      except:
        print 'failure closing file...'




if __name__ == '__main__': main()



